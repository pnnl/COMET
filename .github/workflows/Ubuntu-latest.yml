# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Test on Ubuntu Linux
on: workflow_dispatch
on:
  push:
    branches: [ "master", "dev-new"]
  pull_request:
    branches: [ "master", "dev-new"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  COMET_SRC: ${{github.workspace}}
  COMETPY_COMET_PATH: ${{github.workspace}}/build/comet/
  COMETPY_LLVM_PATH: ${{github.workspace}}/build/llvm/
jobs:
  build-comet-and-dependencies:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: lukka/get-cmake@latest
    # - name: Install CMake
    #   run: sudo apt-get install cmake && sudo apt-get install ninja-build
    
    - name: Cache Submodules
      id: cache-submodule
      uses: actions/cache@v4
      # if: always()
      with:
        path: |
          ${{github.workspace}}/build/llvm
          ${{github.workspace}}/build/blis
        key: ${{ runner.os }}-submodules

    - name: Build clean
      if: steps.cache-submodule.outputs.cache-hit != 'true'
      run: mkdir ${{github.workspace}}/build && cd ${{github.workspace}}/build && cmake ../ -DCMAKE_BUILD_TYPE=Release && make

    - name: Build from cached
      if: steps.cache-submodule.outputs.cache-hit == 'true'
      run: cd ${{github.workspace}}/build && cmake ../ -DCMAKE_BUILD_TYPE=Release -DLLVM_CUSTOM_BUILD_PATH=${{github.workspace}}/build/llvm -DCMAKE_BUILD_TYPE=Release && make


  test-comet-backend:

    needs: build-comet-and-dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    # - uses: lukka/get-cmake@latest
    - name: Install CMake
      run: sudo apt-get install cmake && sudo apt-get install ninja-build
      

    - name: Cache Submodules
      id: cache-submodule
      uses: actions/cache@v4
      # if: always()
      with:
        path: |
          ${{github.workspace}}/build/llvm
          ${{github.workspace}}/build/blis
        key: ${{ runner.os }}-submodules

    - name: Build COMET
      working-directory: ${{github.workspace}}/build/
      # Build your program with the given configuration
      run: cmake .. -DLLVM_CUSTOM_BUILD_PATH=${{github.workspace}}/build/llvm -DCMAKE_BUILD_TYPE=Release && make
    
    - name: Initialize Python 3.11
      uses: actions/setup-python@v4
      
      with:
          python-version: 3.11
      
    - name: Install python dependencies
      run: |
          sudo apt-get install -y python3-psutil
          sudo apt-get install -y python3-pip
           
    - name: Test
      working-directory: ${{github.workspace}}/build/comet/
      shell: bash
       
      run: ninja check-comet-integration
          # ${{github.workspace}}/llvm/build/bin/mlir-cpu-runner --help
          # ${{github.workspace}}/build/bin/comet-opt --help
          
  
  # test-rust-frontend:
  #   needs: build-comet
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Cache Submodules
  #     id: cache-submodule
  #     uses: actions/cache@v4
  #     # if: always()
  #     with:
  #       path: |
  #         ${{github.workspace}}/llvm
  #         ${{github.workspace}}/blis/
  #         ${{github.workspace}}/install/
  #         ${{github.workspace}}/build/
  #       key: ${{ runner.os }}-submodules
        
  #   - name: Setup Rust environment
  #     run: rustup update stable && rustup default stable
      
  #   - name: Test Rust Frontend
  #     env:
  #       COMET_DIR: ${{github.workspace}}/
  #     working-directory: ${{github.workspace}}/frontends/rust/comet-rs
  #     run: |
  #       cargo build
  #       cargo test
  
  test-cometpy:
    needs: build-comet-and-dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Submodules
      id: cache-submodule
      uses: actions/cache@v4
      # if: always()
      with:
        path: |
          ${{github.workspace}}/build/llvm
          ${{github.workspace}}/build/blis
        key: ${{ runner.os }}-submodules
        
    - name: Initialize Python 3.11
      uses: actions/setup-python@v4
      
      with:
          python-version: 3.11

    - name: Install python dependencies
      run: |
          sudo apt-get install -y python3-pip
          
    - name: Build COMET
      working-directory: ${{github.workspace}}/build/
      # Build your program with the given configuration
      run: cmake .. -DLLVM_CUSTOM_BUILD_PATH=${{github.workspace}}/build/llvm -DCMAKE_BUILD_TYPE=Release && make

      
    - name: Setup cometPy
      run: cd ${{github.workspace}}/frontends/numpy-scipy/ && pip3 install -e .

    - name: Install PyTest
      run: pip3 install -U pytest

    - name: Test CometPy
      working-directory: ${{github.workspace}}/frontends/numpy-scipy/integration_tests/

      run: pytest
