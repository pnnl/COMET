# RUN: comet-opt --convert-to-loops --convert-to-llvm %s &> utility_printCOO_multi.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank2_small.mtx
# RUN: export SPARSE_FILE_NAME1=%comet_integration_test_data_dir/test_rank2.mtx
# RUN: mlir-cpu-runner utility_printCOO_multi.llvm -O3 -e main -entry-point-result=void -shared-libs=%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
	#IndexLabel Declarations
	IndexLabel [a] = [?];
	IndexLabel [b] = [?];
	IndexLabel [c] = [?];
    IndexLabel [d] = [?];

	#Tensor Declarations
	Tensor<double> A([a, b], {COO});	  
    Tensor<double> B([c, d], {COO});

	#Tensor Fill Operation
	A[a, b] = comet_read(0);
    B[c, d] = comet_read(1);
	
	print(A);
    print(B);
}

# Tensor A is printed in COO. Each data corresponds to A1_pos, A1_crd, A2_pos, A2_crd, Value, respectively. 
# data = -1 means that no data needed for this array
# Look at the following paper - https://arxiv.org/pdf/2102.05187.pdf - for the internal tensor storage format details.
# CHECK: data = 
# CHECK-NEXT: 0,7,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,0,1,1,3,4,4,
# CHECK-NEXT: data = 
# CHECK-NEXT: -1,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,3,0,1,1,2,3,
# CHECK-NEXT: data = 
# CHECK-NEXT: 1,2,3,4,5,6,7,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,9,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,0,1,1,2,3,3,4,4,
# CHECK-NEXT: data = 
# CHECK-NEXT: -1,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,3,1,4,2,0,3,1,4,
# CHECK-NEXT: data = 
# CHECK-NEXT: 1,1.4,2,2.5,3,4.1,4,5.2,5,