# RUN: comet-opt --convert-to-loops --convert-to-llvm %s &> transpose_CSF_tensor.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank3.tns
# RUN: export SORT_TYPE=SEQ_QSORT
# RUN: mlir-cpu-runner transpose_CSF_tensor.llvm -O3 -e main -entry-point-result=void -shared-libs=%mlir_utility_library_dir/libmlir_runner_utils%shlibext,%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
	#IndexLabel Declarations
	IndexLabel [i] = [?];
	IndexLabel [j] = [?];           
	IndexLabel [k] = [?];           

	#Tensor Declarations
	Tensor<double> A([i, j, k], CSF);	  
	Tensor<double> B([k, i, j], CSF);

    #Tensor Readfile Operation      
    A[i, j, k] = comet_read(0);

	#Tensor Transpose
	B[k, i, j] = transpose(A[i, j, k],{k, i, j});
	print(B);
}

# Print the result for verification.
# CHECK: data = 
# CHECK-NEXT: 0,3,
# CHECK-NEXT: data = 
# CHECK-NEXT: 2,3,5,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,1,2,3,
# CHECK-NEXT: data = 
# CHECK-NEXT: 1,2,3,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,1,2,3,
# CHECK-NEXT: data = 
# CHECK-NEXT: 3,1,6,
# CHECK-NEXT: data = 
# CHECK-NEXT: 1.3,2.11,3,
