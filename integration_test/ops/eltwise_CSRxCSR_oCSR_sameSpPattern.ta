# Sparse matrix sparse matrix elementwise multiplication, in which both matrices have the same sparsity pattern
# Sparse matrix is in CSR format. Currently workspace transformation on the IndexTree dialect works for only CSR format
# In this example, workspace transformations are apply on the input sparse matrices. 
# RUN: comet-opt --opt-comp-workspace --convert-ta-to-it --convert-to-loops --convert-to-llvm %s &> eltwise_CSRxCSR_oCSR.llvm
# RUN: export SPARSE_FILE_NAME0=%comet_integration_test_data_dir/test_rank2.mtx
# RUN: mlir-cpu-runner eltwise_CSRxCSR_oCSR.llvm -O3 -e main -entry-point-result=void -shared-libs=%mlir_utility_library_dir/libmlir_runner_utils%shlibext,%comet_utility_library_dir/libcomet_runner_utils%shlibext | FileCheck %s

def main() {
	#IndexLabel Declarations
	IndexLabel [i] = [?];
	IndexLabel [j] = [?];            

    Tensor<double> A([i, j], {CSR});  
	Tensor<double> B([i, j], {CSR});
	Tensor<double> C([i, j], {CSR});

    #Tensor Readfile Operation
    A[i, j] = comet_read(0);
	B[i, j] = comet_read(0);

	#Tensor Contraction
	C[i, j] = A[i, j] .* B[i, j];
	
	print(C);
}

# Print the result for verification.
# CHECK: data = 
# CHECK-NEXT: 5,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,2,4,5,7,9,
# CHECK-NEXT: data = 
# CHECK-NEXT: 0,3,1,4,2,0,3,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
# CHECK-NEXT: data = 
# CHECK-NEXT: 1,1.96,4,6.25,9,16.81,16,27.04,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
