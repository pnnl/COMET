module attributes {gpu.container_module, "triton_gpu.compute-capability" = 80 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @main_kernel0_str("main_kernel0") {addr_space = 0 : i32}
  llvm.mlir.global private constant @ptx("//\0A// Generated by LLVM NVPTX Back-End\0A//\0A\0A.version 7.0\0A.target sm_80\0A.address_size 64\0A\0A\09// .globl\09main_kernel0\0A.extern .shared .align 1 .b8 global_smem[];\0A\0A.visible .entry main_kernel0(\0A\09.param .u32 main_kernel0_param_0,\0A\09.param .u32 main_kernel0_param_1,\0A\09.param .u32 main_kernel0_param_2,\0A\09.param .u32 main_kernel0_param_3,\0A\09.param .u32 main_kernel0_param_4,\0A\09.param .u32 main_kernel0_param_5,\0A\09.param .u32 main_kernel0_param_6,\0A\09.param .u32 main_kernel0_param_7,\0A\09.param .u64 main_kernel0_param_8,\0A\09.param .u32 main_kernel0_param_9,\0A\09.param .u64 main_kernel0_param_10,\0A\09.param .u32 main_kernel0_param_11,\0A\09.param .u64 main_kernel0_param_12\0A)\0A.maxntid 128, 1, 1\0A{\0A\09.reg .pred \09%p<12>;\0A\09.reg .b32 \09%r<122>;\0A\09.reg .b64 \09%rd<22>;\0A\09.reg .f64 \09%fd<7>;\0A\0A\09ld.param.u64 \09%rd3, [main_kernel0_param_12];\0A\09ld.param.u64 \09%rd2, [main_kernel0_param_10];\0A\09ld.param.u64 \09%rd1, [main_kernel0_param_8];\0A\09ld.param.u32 \09%r57, [main_kernel0_param_4];\0A\09ld.param.u32 \09%r56, [main_kernel0_param_3];\0A\09ld.param.u32 \09%r55, [main_kernel0_param_2];\0A\09ld.param.u32 \09%r63, [main_kernel0_param_0];\0A\09ld.param.u32 \09%r64, [main_kernel0_param_1];\0A\09mov.u32 \09%r65, %tid.x;\0A\09bfe.u32 \09%r66, %r65, 3, 2;\0A\09ld.param.u32 \09%r67, [main_kernel0_param_5];\0A\09shr.u32 \09%r68, %r65, 3;\0A\09and.b32  \09%r69, %r68, 12;\0A\09ld.param.u32 \09%r70, [main_kernel0_param_6];\0A\09or.b32  \09%r71, %r66, %r69;\0A\09ld.param.u32 \09%r72, [main_kernel0_param_7];\0A\09or.b32  \09%r73, %r71, 16;\0A\09and.b32  \09%r74, %r65, 7;\0A\09ld.param.u32 \09%r75, [main_kernel0_param_9];\0A\09// begin inline asm\0A\09mov.u32 %r58, %nctaid.y;\0A\09// end inline asm\0A\09// begin inline asm\0A\09mov.u32 %r59, %nctaid.x;\0A\09// end inline asm\0A\09ld.param.u32 \09%r76, [main_kernel0_param_11];\0A\09// begin inline asm\0A\09mov.u32 %r60, %ctaid.y;\0A\09// end inline asm\0A\09// begin inline asm\0A\09mov.u32 %r61, %ctaid.x;\0A\09// end inline asm\0A\09sub.s32 \09%r4, %r63, %r60;\0A\09sub.s32 \09%r5, %r64, %r61;\0A\09mul.lo.s32 \09%r77, %r71, %r55;\0A\09mul.lo.s32 \09%r78, %r73, %r55;\0A\09mad.lo.s32 \09%r79, %r67, %r55, %r56;\0A\09mad.lo.s32 \09%r6, %r56, %r70, %r79;\0A\09mul.lo.s32 \09%r80, %r74, %r55;\0A\09add.s32 \09%r7, %r80, %r56;\0A\09mad.lo.s32 \09%r8, %r56, %r57, %r79;\0A\09mad.lo.s32 \09%r81, %r61, %r55, %r56;\0A\09mul.lo.s32 \09%r9, %r70, %r81;\0A\09mad.lo.s32 \09%r82, %r60, %r55, %r56;\0A\09mad.lo.s32 \09%r83, %r57, %r82, %r56;\0A\09add.s32 \09%r84, %r83, %r80;\0A\09mad.lo.s32 \09%r85, %r76, %r84, %r56;\0A\09add.s32 \09%r111, %r85, %r78;\0A\09mul.lo.s32 \09%r86, %r58, %r76;\0A\09mul.lo.s32 \09%r87, %r86, %r57;\0A\09mul.lo.s32 \09%r11, %r87, %r55;\0A\09mul.lo.s32 \09%r88, %r59, %r70;\0A\09mul.lo.s32 \09%r12, %r88, %r55;\0A\09mad.lo.s32 \09%r89, %r75, %r84, %r56;\0A\09add.s32 \09%r110, %r89, %r78;\0A\09mul.lo.s32 \09%r90, %r58, %r75;\0A\09mul.lo.s32 \09%r91, %r90, %r57;\0A\09mul.lo.s32 \09%r14, %r91, %r55;\0A\09mad.lo.s32 \09%r92, %r72, %r84, %r56;\0A\09add.s32 \09%r109, %r92, %r78;\0A\09mul.lo.s32 \09%r93, %r58, %r72;\0A\09mul.lo.s32 \09%r94, %r93, %r57;\0A\09mul.lo.s32 \09%r16, %r94, %r55;\0A\09add.s32 \09%r17, %r56, %r78;\0A\09add.s32 \09%r108, %r85, %r77;\0A\09add.s32 \09%r107, %r89, %r77;\0A\09add.s32 \09%r106, %r92, %r77;\0A\09add.s32 \09%r21, %r56, %r77;\0A\09mov.b32 \09%r112, 0;\0A\09bra.uni \09$L__BB0_1;\0A$L__BB0_5:\0A\09add.s32 \09%r112, %r112, %r58;\0A\09add.s32 \09%r111, %r111, %r11;\0A\09add.s32 \09%r110, %r110, %r14;\0A\09add.s32 \09%r109, %r109, %r16;\0A\09add.s32 \09%r108, %r108, %r11;\0A\09add.s32 \09%r107, %r107, %r14;\0A\09add.s32 \09%r106, %r106, %r16;\0A$L__BB0_1:\0A\09setp.ge.s32 \09%p1, %r112, %r4;\0A\09@%p1 bra \09$L__BB0_6;\0A\09add.s32 \09%r96, %r60, %r112;\0A\09mad.lo.s32 \09%r97, %r96, %r55, %r56;\0A\09mad.lo.s32 \09%r29, %r97, %r57, %r7;\0A\09mov.b32 \09%r121, 0;\0A\09setp.lt.s32 \09%p9, %r29, %r8;\0A\09mov.u32 \09%r113, %r21;\0A\09mov.u32 \09%r114, %r106;\0A\09mov.u32 \09%r115, %r107;\0A\09mov.u32 \09%r116, %r108;\0A\09mov.u32 \09%r117, %r17;\0A\09mov.u32 \09%r118, %r109;\0A\09mov.u32 \09%r119, %r110;\0A\09mov.u32 \09%r120, %r111;\0A$L__BB0_3:\0A\09setp.ge.s32 \09%p2, %r121, %r5;\0A\09@%p2 bra \09$L__BB0_5;\0A\09add.s32 \09%r98, %r9, %r113;\0A\09add.s32 \09%r99, %r9, %r117;\0A\09setp.lt.s32 \09%p10, %r98, %r6;\0A\09setp.lt.s32 \09%p11, %r99, %r6;\0A\09and.pred  \09%p3, %p10, %p9;\0A\09and.pred  \09%p4, %p11, %p9;\0A\09add.s32 \09%r100, %r9, %r114;\0A\09add.s32 \09%r101, %r9, %r118;\0A\09mul.wide.s32 \09%rd16, %r100, 8;\0A\09add.s64 \09%rd5, %rd1, %rd16;\0A\09mul.wide.s32 \09%rd17, %r101, 8;\0A\09add.s64 \09%rd7, %rd1, %rd17;\0A\09// begin inline asm\0A\09mov.u64 %rd4, 0x0;\0A\09@%p3 ld.global.b64 { %rd4 }, [ %rd5 + 0 ];\0A\09// end inline asm\0A\09mov.b64 \09%fd1, %rd4;\0A\09// begin inline asm\0A\09mov.u64 %rd6, 0x0;\0A\09@%p4 ld.global.b64 { %rd6 }, [ %rd7 + 0 ];\0A\09// end inline asm\0A\09mov.b64 \09%fd2, %rd6;\0A\09add.s32 \09%r102, %r9, %r115;\0A\09add.s32 \09%r103, %r9, %r119;\0A\09mul.wide.s32 \09%rd18, %r102, 8;\0A\09add.s64 \09%rd9, %rd2, %rd18;\0A\09mul.wide.s32 \09%rd19, %r103, 8;\0A\09add.s64 \09%rd11, %rd2, %rd19;\0A\09// begin inline asm\0A\09mov.u64 %rd8, 0x0;\0A\09@%p3 ld.global.b64 { %rd8 }, [ %rd9 + 0 ];\0A\09// end inline asm\0A\09mov.b64 \09%fd3, %rd8;\0A\09// begin inline asm\0A\09mov.u64 %rd10, 0x0;\0A\09@%p4 ld.global.b64 { %rd10 }, [ %rd11 + 0 ];\0A\09// end inline asm\0A\09mov.b64 \09%fd4, %rd10;\0A\09add.rn.f64 \09%fd5, %fd1, %fd3;\0A\09add.rn.f64 \09%fd6, %fd2, %fd4;\0A\09add.s32 \09%r104, %r9, %r116;\0A\09add.s32 \09%r105, %r9, %r120;\0A\09mul.wide.s32 \09%rd20, %r104, 8;\0A\09add.s64 \09%rd13, %rd3, %rd20;\0A\09mul.wide.s32 \09%rd21, %r105, 8;\0A\09add.s64 \09%rd15, %rd3, %rd21;\0A\09mov.b64 \09%rd12, %fd5;\0A\09// begin inline asm\0A\09@%p3 st.global.b64 [ %rd13 + 0 ], { %rd12 };\0A\09// end inline asm\0A\09mov.b64 \09%rd14, %fd6;\0A\09// begin inline asm\0A\09@%p4 st.global.b64 [ %rd15 + 0 ], { %rd14 };\0A\09// end inline asm\0A\09add.s32 \09%r121, %r121, %r59;\0A\09add.s32 \09%r120, %r120, %r12;\0A\09add.s32 \09%r119, %r119, %r12;\0A\09add.s32 \09%r118, %r118, %r12;\0A\09add.s32 \09%r117, %r117, %r12;\0A\09add.s32 \09%r116, %r116, %r12;\0A\09add.s32 \09%r115, %r115, %r12;\0A\09add.s32 \09%r114, %r114, %r12;\0A\09add.s32 \09%r113, %r113, %r12;\0A\09bra.uni \09$L__BB0_3;\0A$L__BB0_6:\0A\09ret;\0A\0A}\0A") {addr_space = 0 : i32}
  llvm.func @main() {
    %0 = llvm.mlir.constant(12 : index) : i64
    %1 = llvm.mlir.constant(11 : index) : i64
    %2 = llvm.mlir.constant(10 : index) : i64
    %3 = llvm.mlir.constant(9 : index) : i64
    %4 = llvm.mlir.constant(7 : index) : i64
    %5 = llvm.mlir.constant(6 : index) : i64
    %6 = llvm.mlir.constant(5 : index) : i64
    %7 = llvm.mlir.constant(3 : index) : i64
    %8 = llvm.mlir.constant(2 : index) : i64
    %9 = llvm.mlir.constant(0 : i32) : i32
    %10 = llvm.mlir.constant(16 : index) : i64
    %11 = llvm.mlir.constant(2.700000e+00 : f64) : f64
    %12 = llvm.mlir.constant(3.200000e+00 : f64) : f64
    %13 = llvm.mlir.constant(0.000000e+00 : f64) : f64
    %14 = llvm.mlir.constant(0 : index) : i64
    %15 = llvm.mlir.constant(1 : index) : i64
    %16 = llvm.mlir.constant(4 : index) : i64
    %17 = llvm.mlir.constant(8 : index) : i64
    %18 = llvm.mlir.constant(32 : index) : i64
    %19 = llvm.mlir.addressof @ptx : !llvm.ptr
    llvm.call @cudaSetModuleImage(%19) : (!llvm.ptr) -> ()
    %20 = llvm.mlir.constant(4 : index) : i64
    %21 = llvm.mlir.constant(4 : index) : i64
    %22 = llvm.mlir.constant(1 : index) : i64
    %23 = llvm.mlir.constant(16 : index) : i64
    %24 = llvm.mlir.zero : !llvm.ptr
    %25 = llvm.getelementptr %24[16] : (!llvm.ptr) -> !llvm.ptr, f64
    %26 = llvm.ptrtoint %25 : !llvm.ptr to i64
    %27 = llvm.mlir.constant(32 : index) : i64
    %28 = llvm.add %26, %27  : i64
    %29 = llvm.call @malloc(%28) : (i64) -> !llvm.ptr
    %30 = llvm.ptrtoint %29 : !llvm.ptr to i64
    %31 = llvm.mlir.constant(1 : index) : i64
    %32 = llvm.sub %27, %31  : i64
    %33 = llvm.add %30, %32  : i64
    %34 = llvm.urem %33, %27  : i64
    %35 = llvm.sub %33, %34  : i64
    %36 = llvm.inttoptr %35 : i64 to !llvm.ptr
    %37 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %38 = llvm.insertvalue %29, %37[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %39 = llvm.insertvalue %36, %38[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %40 = llvm.mlir.constant(0 : index) : i64
    %41 = llvm.insertvalue %40, %39[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %42 = llvm.insertvalue %20, %41[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %43 = llvm.insertvalue %21, %42[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %44 = llvm.insertvalue %21, %43[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %45 = llvm.insertvalue %22, %44[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %46 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %47 = llvm.insertvalue %29, %46[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %48 = llvm.insertvalue %36, %47[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %49 = llvm.mlir.constant(0 : index) : i64
    %50 = llvm.insertvalue %49, %48[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %51 = llvm.mlir.constant(16 : index) : i64
    %52 = llvm.insertvalue %51, %50[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %53 = llvm.mlir.constant(1 : index) : i64
    %54 = llvm.insertvalue %53, %52[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %55 = llvm.call @cudaMallocF64(%10) : (i64) -> i64
    %56 = llvm.mlir.constant(4 : index) : i64
    %57 = llvm.mlir.constant(4 : index) : i64
    %58 = llvm.mlir.constant(1 : index) : i64
    %59 = llvm.mlir.constant(16 : index) : i64
    %60 = llvm.mlir.zero : !llvm.ptr
    %61 = llvm.getelementptr %60[16] : (!llvm.ptr) -> !llvm.ptr, f64
    %62 = llvm.ptrtoint %61 : !llvm.ptr to i64
    %63 = llvm.mlir.constant(32 : index) : i64
    %64 = llvm.add %62, %63  : i64
    %65 = llvm.call @malloc(%64) : (i64) -> !llvm.ptr
    %66 = llvm.ptrtoint %65 : !llvm.ptr to i64
    %67 = llvm.mlir.constant(1 : index) : i64
    %68 = llvm.sub %63, %67  : i64
    %69 = llvm.add %66, %68  : i64
    %70 = llvm.urem %69, %63  : i64
    %71 = llvm.sub %69, %70  : i64
    %72 = llvm.inttoptr %71 : i64 to !llvm.ptr
    %73 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %74 = llvm.insertvalue %65, %73[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %75 = llvm.insertvalue %72, %74[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %76 = llvm.mlir.constant(0 : index) : i64
    %77 = llvm.insertvalue %76, %75[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %78 = llvm.insertvalue %56, %77[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %79 = llvm.insertvalue %57, %78[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %80 = llvm.insertvalue %57, %79[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %81 = llvm.insertvalue %58, %80[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %82 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %83 = llvm.insertvalue %65, %82[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %84 = llvm.insertvalue %72, %83[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %85 = llvm.mlir.constant(0 : index) : i64
    %86 = llvm.insertvalue %85, %84[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %87 = llvm.mlir.constant(16 : index) : i64
    %88 = llvm.insertvalue %87, %86[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %89 = llvm.mlir.constant(1 : index) : i64
    %90 = llvm.insertvalue %89, %88[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %91 = llvm.call @cudaMallocF64(%10) : (i64) -> i64
    %92 = llvm.mlir.constant(4 : index) : i64
    %93 = llvm.mlir.constant(4 : index) : i64
    %94 = llvm.mlir.constant(1 : index) : i64
    %95 = llvm.mlir.constant(16 : index) : i64
    %96 = llvm.mlir.zero : !llvm.ptr
    %97 = llvm.getelementptr %96[16] : (!llvm.ptr) -> !llvm.ptr, f64
    %98 = llvm.ptrtoint %97 : !llvm.ptr to i64
    %99 = llvm.mlir.constant(32 : index) : i64
    %100 = llvm.add %98, %99  : i64
    %101 = llvm.call @malloc(%100) : (i64) -> !llvm.ptr
    %102 = llvm.ptrtoint %101 : !llvm.ptr to i64
    %103 = llvm.mlir.constant(1 : index) : i64
    %104 = llvm.sub %99, %103  : i64
    %105 = llvm.add %102, %104  : i64
    %106 = llvm.urem %105, %99  : i64
    %107 = llvm.sub %105, %106  : i64
    %108 = llvm.inttoptr %107 : i64 to !llvm.ptr
    %109 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %110 = llvm.insertvalue %101, %109[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %111 = llvm.insertvalue %108, %110[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %112 = llvm.mlir.constant(0 : index) : i64
    %113 = llvm.insertvalue %112, %111[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %114 = llvm.insertvalue %92, %113[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %115 = llvm.insertvalue %93, %114[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %116 = llvm.insertvalue %93, %115[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %117 = llvm.insertvalue %94, %116[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %118 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %119 = llvm.insertvalue %101, %118[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %120 = llvm.insertvalue %108, %119[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %121 = llvm.mlir.constant(0 : index) : i64
    %122 = llvm.insertvalue %121, %120[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %123 = llvm.mlir.constant(16 : index) : i64
    %124 = llvm.insertvalue %123, %122[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %125 = llvm.mlir.constant(1 : index) : i64
    %126 = llvm.insertvalue %125, %124[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %127 = llvm.call @cudaMallocF64(%10) : (i64) -> i64
    llvm.br ^bb1(%14 : i64)
  ^bb1(%128: i64):  // 2 preds: ^bb0, ^bb4
    %129 = llvm.icmp "slt" %128, %16 : i64
    llvm.cond_br %129, ^bb2(%14 : i64), ^bb5(%14 : i64)
  ^bb2(%130: i64):  // 2 preds: ^bb1, ^bb3
    %131 = llvm.icmp "slt" %130, %16 : i64
    llvm.cond_br %131, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %132 = llvm.mul %128, %16  : i64
    %133 = llvm.add %132, %130  : i64
    %134 = llvm.getelementptr %36[%133] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %11, %134 : f64, !llvm.ptr
    %135 = llvm.add %130, %15  : i64
    llvm.br ^bb2(%135 : i64)
  ^bb4:  // pred: ^bb2
    %136 = llvm.add %128, %15  : i64
    llvm.br ^bb1(%136 : i64)
  ^bb5(%137: i64):  // 2 preds: ^bb1, ^bb8
    %138 = llvm.icmp "slt" %137, %16 : i64
    llvm.cond_br %138, ^bb6(%14 : i64), ^bb9(%14 : i64)
  ^bb6(%139: i64):  // 2 preds: ^bb5, ^bb7
    %140 = llvm.icmp "slt" %139, %16 : i64
    llvm.cond_br %140, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %141 = llvm.mul %137, %16  : i64
    %142 = llvm.add %141, %139  : i64
    %143 = llvm.getelementptr %72[%142] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %12, %143 : f64, !llvm.ptr
    %144 = llvm.add %139, %15  : i64
    llvm.br ^bb6(%144 : i64)
  ^bb8:  // pred: ^bb6
    %145 = llvm.add %137, %15  : i64
    llvm.br ^bb5(%145 : i64)
  ^bb9(%146: i64):  // 2 preds: ^bb5, ^bb12
    %147 = llvm.icmp "slt" %146, %16 : i64
    llvm.cond_br %147, ^bb10(%14 : i64), ^bb13
  ^bb10(%148: i64):  // 2 preds: ^bb9, ^bb11
    %149 = llvm.icmp "slt" %148, %16 : i64
    llvm.cond_br %149, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    %150 = llvm.mul %146, %16  : i64
    %151 = llvm.add %150, %148  : i64
    %152 = llvm.getelementptr %108[%151] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    llvm.store %13, %152 : f64, !llvm.ptr
    %153 = llvm.add %148, %15  : i64
    llvm.br ^bb10(%153 : i64)
  ^bb12:  // pred: ^bb10
    %154 = llvm.add %146, %15  : i64
    llvm.br ^bb9(%154 : i64)
  ^bb13:  // pred: ^bb9
    llvm.call @cudaMemcpyF64(%55, %29, %36, %49, %51, %53, %14) : (i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) -> ()
    llvm.call @cudaMemcpyF64(%91, %65, %72, %85, %87, %89, %14) : (i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) -> ()
    llvm.call @cudaMemcpyF64(%127, %101, %108, %121, %123, %125, %14) : (i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) -> ()
    %155 = llvm.mlir.constant(1 : index) : i64
    %156 = llvm.mlir.constant(1 : index) : i64
    %157 = llvm.alloca %155 x i64 : (i64) -> !llvm.ptr
    %158 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %159 = llvm.insertvalue %157, %158[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %160 = llvm.insertvalue %157, %159[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %161 = llvm.mlir.constant(0 : index) : i64
    %162 = llvm.insertvalue %161, %160[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %163 = llvm.insertvalue %155, %162[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %164 = llvm.insertvalue %156, %163[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %15, %157 : i64, !llvm.ptr
    %165 = llvm.ptrtoint %157 : !llvm.ptr to i64
    %166 = llvm.mlir.constant(1 : index) : i64
    %167 = llvm.mlir.constant(1 : index) : i64
    %168 = llvm.alloca %166 x i64 : (i64) -> !llvm.ptr
    %169 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %170 = llvm.insertvalue %168, %169[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %171 = llvm.insertvalue %168, %170[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %172 = llvm.mlir.constant(0 : index) : i64
    %173 = llvm.insertvalue %172, %171[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %174 = llvm.insertvalue %166, %173[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %175 = llvm.insertvalue %167, %174[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %15, %168 : i64, !llvm.ptr
    %176 = llvm.ptrtoint %168 : !llvm.ptr to i64
    %177 = llvm.mlir.constant(1 : index) : i64
    %178 = llvm.mlir.constant(1 : index) : i64
    %179 = llvm.alloca %177 x i64 : (i64) -> !llvm.ptr
    %180 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %181 = llvm.insertvalue %179, %180[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %182 = llvm.insertvalue %179, %181[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %183 = llvm.mlir.constant(0 : index) : i64
    %184 = llvm.insertvalue %183, %182[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %185 = llvm.insertvalue %177, %184[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %186 = llvm.insertvalue %178, %185[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %15, %179 : i64, !llvm.ptr
    %187 = llvm.ptrtoint %179 : !llvm.ptr to i64
    %188 = llvm.mlir.constant(1 : index) : i64
    %189 = llvm.mlir.constant(1 : index) : i64
    %190 = llvm.alloca %188 x i64 : (i64) -> !llvm.ptr
    %191 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %192 = llvm.insertvalue %190, %191[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %193 = llvm.insertvalue %190, %192[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %194 = llvm.mlir.constant(0 : index) : i64
    %195 = llvm.insertvalue %194, %193[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %196 = llvm.insertvalue %188, %195[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %197 = llvm.insertvalue %189, %196[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %14, %190 : i64, !llvm.ptr
    %198 = llvm.ptrtoint %190 : !llvm.ptr to i64
    %199 = llvm.mlir.constant(1 : index) : i64
    %200 = llvm.mlir.constant(1 : index) : i64
    %201 = llvm.alloca %199 x i64 : (i64) -> !llvm.ptr
    %202 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %203 = llvm.insertvalue %201, %202[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %204 = llvm.insertvalue %201, %203[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %205 = llvm.mlir.constant(0 : index) : i64
    %206 = llvm.insertvalue %205, %204[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %207 = llvm.insertvalue %199, %206[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %208 = llvm.insertvalue %200, %207[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %17, %201 : i64, !llvm.ptr
    %209 = llvm.ptrtoint %201 : !llvm.ptr to i64
    %210 = llvm.mlir.constant(1 : index) : i64
    %211 = llvm.mlir.constant(1 : index) : i64
    %212 = llvm.alloca %210 x i64 : (i64) -> !llvm.ptr
    %213 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %214 = llvm.insertvalue %212, %213[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %215 = llvm.insertvalue %212, %214[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %216 = llvm.mlir.constant(0 : index) : i64
    %217 = llvm.insertvalue %216, %215[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %218 = llvm.insertvalue %210, %217[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %219 = llvm.insertvalue %211, %218[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %16, %212 : i64, !llvm.ptr
    %220 = llvm.ptrtoint %212 : !llvm.ptr to i64
    %221 = llvm.mlir.constant(1 : index) : i64
    %222 = llvm.mlir.constant(1 : index) : i64
    %223 = llvm.alloca %221 x i64 : (i64) -> !llvm.ptr
    %224 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %225 = llvm.insertvalue %223, %224[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %226 = llvm.insertvalue %223, %225[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %227 = llvm.mlir.constant(0 : index) : i64
    %228 = llvm.insertvalue %227, %226[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %229 = llvm.insertvalue %221, %228[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %230 = llvm.insertvalue %222, %229[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %18, %223 : i64, !llvm.ptr
    %231 = llvm.ptrtoint %223 : !llvm.ptr to i64
    %232 = llvm.mlir.constant(1 : index) : i64
    %233 = llvm.mlir.constant(1 : index) : i64
    %234 = llvm.alloca %232 x i64 : (i64) -> !llvm.ptr
    %235 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %236 = llvm.insertvalue %234, %235[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %237 = llvm.insertvalue %234, %236[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %238 = llvm.mlir.constant(0 : index) : i64
    %239 = llvm.insertvalue %238, %237[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %240 = llvm.insertvalue %232, %239[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %241 = llvm.insertvalue %233, %240[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %16, %234 : i64, !llvm.ptr
    %242 = llvm.ptrtoint %234 : !llvm.ptr to i64
    %243 = llvm.mlir.constant(1 : index) : i64
    %244 = llvm.mlir.constant(1 : index) : i64
    %245 = llvm.alloca %243 x i64 : (i64) -> !llvm.ptr
    %246 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %247 = llvm.insertvalue %245, %246[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %248 = llvm.insertvalue %245, %247[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %249 = llvm.mlir.constant(0 : index) : i64
    %250 = llvm.insertvalue %249, %248[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %251 = llvm.insertvalue %243, %250[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %252 = llvm.insertvalue %244, %251[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %55, %245 : i64, !llvm.ptr
    %253 = llvm.ptrtoint %245 : !llvm.ptr to i64
    %254 = llvm.mlir.constant(1 : index) : i64
    %255 = llvm.mlir.constant(1 : index) : i64
    %256 = llvm.alloca %254 x i64 : (i64) -> !llvm.ptr
    %257 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %258 = llvm.insertvalue %256, %257[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %259 = llvm.insertvalue %256, %258[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %260 = llvm.mlir.constant(0 : index) : i64
    %261 = llvm.insertvalue %260, %259[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %262 = llvm.insertvalue %254, %261[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %263 = llvm.insertvalue %255, %262[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %16, %256 : i64, !llvm.ptr
    %264 = llvm.ptrtoint %256 : !llvm.ptr to i64
    %265 = llvm.mlir.constant(1 : index) : i64
    %266 = llvm.mlir.constant(1 : index) : i64
    %267 = llvm.alloca %265 x i64 : (i64) -> !llvm.ptr
    %268 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %269 = llvm.insertvalue %267, %268[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %270 = llvm.insertvalue %267, %269[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %271 = llvm.mlir.constant(0 : index) : i64
    %272 = llvm.insertvalue %271, %270[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %273 = llvm.insertvalue %265, %272[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %274 = llvm.insertvalue %266, %273[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %91, %267 : i64, !llvm.ptr
    %275 = llvm.ptrtoint %267 : !llvm.ptr to i64
    %276 = llvm.mlir.constant(1 : index) : i64
    %277 = llvm.mlir.constant(1 : index) : i64
    %278 = llvm.alloca %276 x i64 : (i64) -> !llvm.ptr
    %279 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %280 = llvm.insertvalue %278, %279[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %281 = llvm.insertvalue %278, %280[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %282 = llvm.mlir.constant(0 : index) : i64
    %283 = llvm.insertvalue %282, %281[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %284 = llvm.insertvalue %276, %283[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %285 = llvm.insertvalue %277, %284[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %16, %278 : i64, !llvm.ptr
    %286 = llvm.ptrtoint %278 : !llvm.ptr to i64
    %287 = llvm.mlir.constant(1 : index) : i64
    %288 = llvm.mlir.constant(1 : index) : i64
    %289 = llvm.alloca %287 x i64 : (i64) -> !llvm.ptr
    %290 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %291 = llvm.insertvalue %289, %290[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %292 = llvm.insertvalue %289, %291[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %293 = llvm.mlir.constant(0 : index) : i64
    %294 = llvm.insertvalue %293, %292[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %295 = llvm.insertvalue %287, %294[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %296 = llvm.insertvalue %288, %295[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %127, %289 : i64, !llvm.ptr
    %297 = llvm.ptrtoint %289 : !llvm.ptr to i64
    %298 = llvm.mlir.constant(13 : index) : i64
    %299 = llvm.mlir.constant(1 : index) : i64
    %300 = llvm.alloca %298 x i64 : (i64) -> !llvm.ptr
    %301 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %302 = llvm.insertvalue %300, %301[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %303 = llvm.insertvalue %300, %302[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %304 = llvm.mlir.constant(0 : index) : i64
    %305 = llvm.insertvalue %304, %303[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %306 = llvm.insertvalue %298, %305[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %307 = llvm.insertvalue %299, %306[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.store %165, %300 : i64, !llvm.ptr
    %308 = llvm.getelementptr %300[1] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %176, %308 : i64, !llvm.ptr
    %309 = llvm.getelementptr %300[2] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %187, %309 : i64, !llvm.ptr
    %310 = llvm.getelementptr %300[3] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %198, %310 : i64, !llvm.ptr
    %311 = llvm.getelementptr %300[4] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %209, %311 : i64, !llvm.ptr
    %312 = llvm.getelementptr %300[5] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %220, %312 : i64, !llvm.ptr
    %313 = llvm.getelementptr %300[6] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %231, %313 : i64, !llvm.ptr
    %314 = llvm.getelementptr %300[7] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %242, %314 : i64, !llvm.ptr
    %315 = llvm.getelementptr %300[8] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %253, %315 : i64, !llvm.ptr
    %316 = llvm.getelementptr %300[9] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %264, %316 : i64, !llvm.ptr
    %317 = llvm.getelementptr %300[10] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %275, %317 : i64, !llvm.ptr
    %318 = llvm.getelementptr %300[11] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %286, %318 : i64, !llvm.ptr
    %319 = llvm.getelementptr %300[12] : (!llvm.ptr) -> !llvm.ptr, i64
    llvm.store %297, %319 : i64, !llvm.ptr
    %320 = llvm.mlir.addressof @main_kernel0_str : !llvm.ptr
    %321 = llvm.getelementptr %320[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<12 x i8>
    llvm.call @cudaLaunchKernel(%15, %15, %15, %18, %17, %15, %300, %300, %304, %298, %299, %321, %0, %9, %16, %18) : (i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.ptr, i64, i32, i64, i64) -> ()
    llvm.call @cudaMemcpyF64(%127, %101, %108, %121, %123, %125, %15) : (i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) -> ()
    llvm.call @cudaMemcpyF64(%91, %65, %72, %85, %87, %89, %15) : (i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) -> ()
    llvm.call @cudaMemcpyF64(%55, %29, %36, %49, %51, %53, %15) : (i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) -> ()
    %322 = llvm.mlir.constant(1 : index) : i64
    %323 = llvm.alloca %322 x !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> : (i64) -> !llvm.ptr
    llvm.store %117, %323 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>, !llvm.ptr
    %324 = llvm.mlir.constant(2 : index) : i64
    %325 = llvm.mlir.undef : !llvm.struct<(i64, ptr)>
    %326 = llvm.insertvalue %324, %325[0] : !llvm.struct<(i64, ptr)> 
    %327 = llvm.insertvalue %323, %326[1] : !llvm.struct<(i64, ptr)> 
    llvm.call @comet_print_memref_f64(%324, %323) : (i64, !llvm.ptr) -> ()
    llvm.call @cudaFree(%55) : (i64) -> ()
    llvm.call @cudaFree(%91) : (i64) -> ()
    llvm.call @cudaFree(%127) : (i64) -> ()
    llvm.return
  }
  llvm.func @comet_print_memref_f64(i64, !llvm.ptr) attributes {sym_visibility = "private"}
  llvm.func @cudaMallocI32(i64) -> i64 attributes {sym_visibility = "private"}
  llvm.func @cudaMallocI64(i64) -> i64 attributes {sym_visibility = "private"}
  llvm.func @cudaMallocF32(i64) -> i64 attributes {sym_visibility = "private"}
  llvm.func @cudaMallocF64(i64) -> i64 attributes {sym_visibility = "private"}
  llvm.func @cudaMemcpyI32(i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) attributes {sym_visibility = "private"}
  llvm.func @cudaMemcpyI64(i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) attributes {sym_visibility = "private"}
  llvm.func @cudaMemcpyF32(i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) attributes {sym_visibility = "private"}
  llvm.func @cudaMemcpyF64(i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64) attributes {sym_visibility = "private"}
  llvm.func @cudaLaunchKernel(i64, i64, i64, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.ptr, i64, i32, i64, i64) attributes {sym_visibility = "private"}
  llvm.func @cudaSetModuleImage(!llvm.ptr) attributes {sym_visibility = "private"}
  llvm.func @cudaFree(i64) attributes {sym_visibility = "private"}
}
