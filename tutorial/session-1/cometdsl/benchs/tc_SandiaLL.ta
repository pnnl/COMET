# Triangle Counting Algorithm: Sandia_LL
# Given a symmetric graph A with no-self edges, triangleCount counts the
# number of triangles in the graph.  A triangle is a clique of size three,
# that is, three nodes that are all pairwise connected.

# Reference for the Sandia method:  M. Wolf and et. al., "Fast linear algebra-based 
# triangle counting with KokkosKernels," IEEE High Performance Extreme Computing Conference 2017.
# https://doi.org/10.1109/HPEC.2017.8091043

# Method Sandia_LL:      ntri = sum (sum ((L * L) .* L))

# L is a the strictly lower triangular parts of the symmetrix matrix A.

def main() {
    #IndexLabel Declarations
    IndexLabel [i] = [?];
    IndexLabel [j] = [?];
    IndexLabel [k] = [?];

    #Tensor Declarations
    Tensor<double> L1([i, j], {CSR});

    #Tensor Data Initialization
    L1[i, j] = comet_read(0, 2);   # LOWER_TRI_STRICT

    # Sandia_LL method: ntri = sum (sum ((L * L) .* L))
    ## 
    var time0 = getTime();
    var ntri = SUM(L1[i,k] * L1[k,j] .* L1[i,j]);
    var time1 = getTime();
    print(ntri);
	printElapsedTime(time0, time1);
}
